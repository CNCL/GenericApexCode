/*
    This is a generic batch which can be used to update on any objects 
    
    How to execute this batch 
    ***************************
    string query='SELECT DormantDate__c,Dormant__c,Id,LastTradeDate__c FROM ADSS_Platform_Account__c';
    Map<String, Object> fldValues = new Map<String, Object>();
    fldValues.put('negotiated_profile__c','Test2');
    fldValues.put('Dormant__c', True);
    fldValues.put('DormantDate__c' , Date.today());
    batchupdatefield2 myBatch = new batchupdatefield2(query,fldValues);
    Database.executeBatch(myBatch,50);
    ****************************
*/


public class BatchUpdateField implements Database.Batchable <sObject> {
	public final String Query;
	public final Map <String,Object> fieldValues;
	public BatchUpdateField(String q, Map <String,Object> fieldValues) {
		Query = q;
		this.fieldValues = FieldValues;
	}
	public Database.QueryLocator start(Database.BatchableContext BC) {
		return Database.getQueryLocator(query);
	}
	public void execute(Database.BatchableContext BC, List <sObject> scope) {
		for (sobject s: scope) {
			for (String fldName: fieldValues.keySet()) {
				s.put(fldName, fieldValues.get(fldName));
			}
		}

		update scope;
	}
	public void finish(Database.BatchableContext BC) {
		AsyncApexJob a = [Select Id, Status, NumberOfErrors, JobItemsProcessed, TotalJobItems, CreatedBy.Email
			from AsyncApexJob where Id =: BC.getJobId()];
		string message = 'The batch Apex job processed ' + a.TotalJobItems + ' batches with ' + a.NumberOfErrors + ' failures.';
		// Send an email to the Apex job's submitter notifying of job completion.
		Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
		String[] toAddresses = new String[] {
		    a.CreatedBy.Email
		};
		mail.setToAddresses(toAddresses);
		mail.setSubject('Salesforce BatchUpdateField ' + a.Status);
		mail.setPlainTextBody('The batch Apex job processed ' + a.TotalJobItems + ' batches with ' + a.NumberOfErrors + ' failures.');
		Messaging.sendEmail(new Messaging.SingleEmailMessage[] {
			mail
		});
	}
}
